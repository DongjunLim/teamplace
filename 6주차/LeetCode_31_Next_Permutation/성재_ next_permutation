import java.util.*;
/*
next_permutation 알고리즘 사용
1. 맨뒤에서부터 앞으로 올라오면서 [i-1]<[i]인 지점을 찾음
2. 다시 뒤에서부터 [i-1]<[j] 인 지점을 찾음         (j=nums.length-1부터시작)
3. [i-1],[j] swap
4. i>j{i++,j--} 하면서 swap(i,j)      (j는 다시 맨뒤부터)

dfs보다 효율이 좋음
*/
class Solution {
    public void nextPermutation(int[] nums) {
        next_permutation(nums);
		
	}
	static void next_permutation(int nums[]) {
		int i=nums.length-1;
		
		while(i>0&&nums[i-1]>=nums[i])i--;
		
		if(i<=0) {
			Arrays.sort(nums);
			return;
		}
		
		int j=nums.length-1;
		while(nums[i-1]>=nums[j])j--;
		swap(i-1,j,nums);
		
		j=nums.length-1;
		for(;i<j;i++,j--) {
			swap(i,j,nums);
		}
		
	}
	static void swap(int i,int j,int[] nums) {
    	int temp=nums[i];
    	nums[i]=nums[j];
    	nums[j]=temp;
    }
}
